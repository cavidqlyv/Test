<%@ Master Language="C#" AutoEventWireup="true" %>
<%@ Register Assembly="SoftwareMonkeys.WorkHub.Web" Namespace="SoftwareMonkeys.WorkHub.Web.WebControls" TagPrefix="cc" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Web" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Diagnostics" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Entities" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Business" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Configuration" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Web.State" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.State" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Data" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Modules" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Business.Security" %>
<%@ Import Namespace="SoftwareMonkeys.WorkHub.Web.Navigation" %>
<%@ Register src="Controls/FeedbackPanel.ascx" tagname="FeedbackPanel" tagprefix="uc" %>
<%@ Register Src="Controls/AuthMenu.ascx" TagName="AuthMenu" TagPrefix="uc" %>
<%@ Register Src="Controls/AdminFooter.ascx" TagName="AdminFooter" TagPrefix="uc" %>
<%@ Register Src="Controls/AnalyticsFooter.ascx" TagName="AnalyticsFooter" TagPrefix="uc" %>
<script runat="server">

		/// <summary>
		/// Gets/sets the title displayed in the window.
		/// </summary>
		public string WindowTitle
		{
			get
			{
				if (Context == null)
					return String.Empty;
				if (Context.Items["WindowTitle"] == null)
					Context.Items["WindowTitle"] = "WorkHub";
				return (string)Context.Items["WindowTitle"];
			}
			set { Context.Items["WindowTitle"] = value; }
		}
		
		protected override void OnInit(EventArgs e)
		{
			if (Request != null
				&& Request.UserAgent != null
				&& Request.Browser != null
				&& Request.Browser.Adapters != null)
			{
				// This fix makes the menu work in chrome
				if (Request.UserAgent.Contains("AppleWebKit"))
					Request.Browser.Adapters.Clear();
			}
			
			base.OnInit(e);
		}
		

    private void Page_Load(object sender, EventArgs e)
    {
		using (LogGroup logGroup = LogGroup.StartDebug("Loading the Site.master page."))
		{
			Form.Action = Request.RawUrl;
		
			LogWriter.Debug("URL: " + Request.Url.ToString());
				
			InitializeMenu();
		
			InitializeCurrentProjectSelect();
		
		    EnsureSetup();
		
		    CurrentProject.Attributes.Add("onchange", "SelectProject();");	
		}
    }
    
	private void EnsureSetup()
	{
		using (LogGroup logGroup = LogGroup.StartDebug("Ensuring that the application is set up and initialized."))
		{
			SetupChecker setupChecker = new SetupChecker();
			setupChecker.Check();
		}
	}

	private void InitializeMenu()
	{
			MenuSource.DataBind();

	}

	private void InitializeCurrentProjectSelect()
	{
		CurrentProjectHolder.Visible = Request.Url.ToString().ToLower().IndexOf("setup.aspx") == -1
			&& ModuleState.IsInitialized && ModuleState.IsEnabled("Projects");
			
		
		// TODO: Clean up
		//if (!IsPostBack)
		//{
		    if (SoftwareMonkeys.WorkHub.Configuration.Config.IsInitialized
		    	&& SoftwareMonkeys.WorkHub.Modules.ModuleState.IsInitialized
		        && SoftwareMonkeys.WorkHub.Modules.ModuleState.IsEnabled("Projects"))
			{
				// Set the current project ID if it was provided
				if (ProjectsState.IsEnabled && !QueryStrings.HideTemplate)
				{
					if (Request.QueryString["CurrentProjectID"] != null
						&& (string)Request.QueryString["CurrentProjectID"] != String.Empty)
					{
						try
						{
							ProjectsState.ProjectID = new Guid(Request.QueryString["CurrentProjectID"]);
						}
						catch (Exception ex)
						{
							string message = "Skipping initialization..." + Environment.NewLine
							+ "Invalid project ID: " + Request.QueryString["CurrentProjectID"] + Environment.NewLine
							+ "URL: " + Request.Url.ToString();
								
							if (Request.UrlReferrer != null)
								message = message + "Referrer: " + Request.UrlReferrer.ToString();
						
							LogWriter.Error(message);
							//throw new Exception("Invalid projectID: " + Request.QueryString["CurrentProjectID"]);
						}
					}

			        CurrentProject.DataBind();
				}
		    }
		//}
	}
    
    private void CurrentProject_DataLoading(object sender, EventArgs e)
    {
		using (LogGroup logGroup = LogGroup.StartDebug("Loading the data for the CurrentProject dropdownlist."))
		{
		        if (ModuleState.IsEnabled("Projects") && !QueryStrings.HideTemplate)
		        {
		            CurrentProject.DataSource = IndexStrategy.New("Project").Index();
		        }
		}
    }

    private void CurrentProject_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ModuleState.IsEnabled("Projects") && !QueryStrings.HideTemplate)
        {
                ProjectsState.ProjectID = CurrentProject.SelectedEntityID;
        }
        
    }
    
    private string GetTitle()
    {
        if (Request.QueryString["m"] != null)
		{
			if (ModuleState.Modules.Contains(Request.QueryString["m"]))
		            return ModuleState.Modules[Request.QueryString["m"]].Config.Name;
		}
		else if (Config.IsInitialized && Config.Application != null && Config.Application.Title != null && Config.Application.Title.Trim() != String.Empty)
		{
			return Config.Application.Title;
		}


            return Resources.Language.WorkHub;
    }


	protected string GetMenuDataFile()
	{
			return SoftwareMonkeys.WorkHub.Web.SiteMap.DefaultFilePath;
	}
	
	private Guid GetProjectID()
	{
		Guid projectID = Guid.Empty;
		using (LogGroup logGroup = LogGroup.StartDebug("Retrieving the ID of the current project."))
		{
			if (ProjectsState.IsEnabled && !QueryStrings.HideTemplate)
			{
				if (ProjectsState.ProjectID != null)
					projectID = ProjectsState.ProjectID;
			}
	
			LogWriter.Debug("Project ID: " + projectID.ToString());
		}
		
		return projectID;
	}
	
	private string GetRewrittenUrl()
	{
	    string message = String.Empty;
	    
	    if (HttpContext.Current.Items != null
	        && HttpContext.Current.Items.Contains("RewrittenUrl"))
	    {
	        message = "True path: " +
	            (string)HttpContext.Current.Items["RewrittenUrl"];
	    }
	
	    return message;
	}
	
	private string GetExternalUrl()
	{
		string output = Request.Url.ToString();		
		
		if (Config.IsInitialized && ModuleState.IsEnabled("Projects") && ProjectsState.ProjectSelected)
		{
				output = new ExternalUrlCreator().CreateExternalUrl();
		}
		
		return output;
	}

</script>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN">
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title><%= WindowTitle %></title>
    <%= StyleUtilities.OutputStyleSheets() %>
</head>
<body>
<script type="text/javascript">
    function SelectProject()
    {
	var ddl = document.getElementById('<%= CurrentProject.ClientID %>');
        var projectID = ddl.options[ddl.selectedIndex].value;

	// Get the current URL
        var currentLocation = String(window.location);

	// Remove old project ID query string values
	currentLocation = currentLocation.replace('CurrentProjectID=<%= GetProjectID() %>', '');

        var spacer = '';
	// If no query strings are in the URL then add a ? character spacer
        if (currentLocation.indexOf('?') == -1)
		spacer = '?';
	// If the last character is neither ? nor & then add a & character spacer
	else if (currentLocation.charAt(currentLocation.length-1) != '?' && currentLocation.charAt(currentLocation.length-1) != '&')
	            spacer = "&";
	// Otherwise it remains ''
	

        var projectIDQueryString = "CurrentProjectID=" + projectID;

	// Assemble the new path
        var newPath = currentLocation + spacer + projectIDQueryString;

        window.location = newPath;
    }

</script>
    <form id="Form" runat="server">
        <% if (!Utilities.HideTemplate && Config.IsInitialized){ %>
    <div id="Wrap">
    	<div id="MainContainer">
        	<div id="Head"><%= GetTitle() %> 
           	</div>
           	<div id="Auth">
        		<uc:AuthMenu runat="server"/>
           	</div>
        	<div id="State">
            	<asp:PlaceHolder runat="server" id="CurrentProjectHolder"><%= Resources.Language.CurrentProject %>:&nbsp;<cc:EntitySelect IsReference="false" EnableViewState="true" EntityType='Project' runat="server" id="CurrentProject" AutoPostBack="false" SelectedEntityID='<%# GetProjectID() %>' AutoLoadPostEntities="false" OnSelectedIndexChanged='CurrentProject_SelectedIndexChanged' OnDataLoading="CurrentProject_DataLoading" NoSelectionText='<%# "-- " + Resources.Language.Overview + " --" %>'></cc:EntitySelect>&nbsp;&nbsp;<a href='<%= new Navigator(this).GetLink("Index", "Project") %>' id="IndexProjectsLink"><%= Resources.Language.Index %></a>&nbsp;|&nbsp;<a href='<%= new Navigator(this).GetLink("Create", "Project") %>' id="CreateProjectLink"><%= Resources.Language.Create %></a></asp:PlaceHolder>
           	</div>
        <% } %>
        	
        	
        	<div id="Middle">
        	 <asp:placeholder runat="server" visible='<%# !Utilities.HideTemplate && Config.IsInitialized %>'>
        		<div id="LeftContainer">
		        	<div id="Left">
		        	
		        		<asp:Menu EnableViewState="false" ID="Menu1" runat="server" DataSourceID="MenuSource" visible='<%# !Utilities.HideTemplate && Config.IsInitialized %>' 
							MaximumDynamicDisplayLevels="5" StaticDisplayLevels="1" 
							DynamicHorizontalOffset="1" DynamicVerticalOffset="1" orientation="vertical">
								<DataBindings>
							           <asp:MenuItemBinding DataMember="siteMapNode" TextField="title" ValueField="title" NavigateUrlField="url" SelectableField="selectable" />
							    </DataBindings>
							    <levelsubmenustyles>
								  <asp:SubMenuStyle CssClass="Menu1" />
								  <asp:SubMenuStyle CssClass="Menu2"/> 
								  <asp:SubMenuStyle CssClass="Menu2" />
								  </levelsubmenustyles>  
							</asp:Menu>
		                <asp:XmlDataSource ID="MenuSource" XPath="siteMap/*" DataFile='<%# GetMenuDataFile() %>' runat="server" />
					
			        </div>
		        </div>
		    </asp:placeholder>
		    
		    	<div id="BodyContainer">
			        <div id="Body"><asp:ContentPlaceHolder ID="Body" runat="server">
			                                    </asp:ContentPlaceHolder>    
			        </div>
		        </div>
		    
	        </div>
        <% if (!Utilities.HideTemplate && Config.IsInitialized){ %>
        </div>
        <div id="FootContainer">
        	<div id="Foot">
        		<div id="LeftFoot">
                                WorkHub Version <%= DataAccess.Data.Schema.ApplicationVersion %>
                </div>
                <div id="RightFoot">
                    <%= Resources.Language.Copyright %>
                	<%= DateTime.Now.Year %>
                	<a href="http://www.softwaremonkeys.net">SoftwareMonkeys.net</a>. <%= Resources.Language.AllRightsReserved %>
                </div>
            </div>
            <div id="Tail">
                    <uc:FeedbackPanel ID="FeedbackPanel" runat="server" />
                                <div id="External">
                                	<div>External URL: (to link to this page)</div>
                                	<div>
                                	<span id="Url"><%= GetExternalUrl() %></span>
                                	</div>
                                </div>
                                	<% if (false != false){ /* Disabled but kept in case it's needed for debugging purposes */ %>
                    			<div id="Rewritten">
                   					<%= GetRewrittenUrl() %>
                    			</div>
                                	<% } %>
                                	
		    		<uc:AdminFooter id="AdminFooter" runat="server">
		    		</uc:AdminFooter>
        	</div>
        	<% } %>
        </div>
    </div>
        
		    <uc:AnalyticsFooter id="AnalyticsFooter" runat="server">
		    </uc:AnalyticsFooter>
    </form>
</body>
</html>
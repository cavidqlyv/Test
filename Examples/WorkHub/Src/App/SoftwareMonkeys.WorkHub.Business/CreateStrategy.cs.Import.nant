<?xml version="1.0"?>
<project name="Import" xmlns="http://nant.sf.net/schemas/nant.xsd">
		  <property name="Import.FromProject" value="SiteStarter" />
		  <property name="Import.From" value="${Solution.RootPath}\${Solution.BaseNamespace}.Business" />
		  <property name="Import.Include" value="CreateStrategy.cs" />
		  <property name="Import.To" value="${Solution.RootPath}\${Solution.BaseNamespace}.Business" />
		  <property name="Import.Flatten" value="false" />
		  <property name="Import.ReplaceBaseNamespace" value="true" />
		  <property name="Import.ReplaceName" value="true" />
		  
		    
<target name="Actions.Import.Adapt">
    <script language="C#" prefix="Project">
    	<references>
              <include name="System.IO.dll" />
		<include name="System.CodeDom.dll"/>
		<include name="System.dll"/>
		<include name="System.Collections.dll"/>
          </references>

		<code>
		<![CDATA[

			static public void ScriptMain(Project project)
			{

				string path = project.Properties["Import.To"] + @"\_importing";

				System.Collections.Generic.Dictionary<string, string> replaceables = new System.Collections.Generic.Dictionary<string, string>();

				// ===== START: Replaceables

				// [BaseNamespace].Data
				//replaceables.Add(project.Properties["Import.FromProject.BaseNamespace"],
				//			project.Properties["Project.BaseNamespace"]);


				// ===== END

				foreach (string file in Directory.GetFiles(path))
				{
					string fileContent = String.Empty;
				
					// Load file
					using (StreamReader reader = new StreamReader(File.OpenRead(file)))
					{
						fileContent = reader.ReadToEnd();
		
						reader.Close();
					}
		
					// ===== START: Adapt file

					foreach (string key in replaceables.Keys)
					{
						fileContent = fileContent.Replace(key,replaceables[key]);
					}

					// ===== END
		
					// Save file
					using (StreamWriter writer = new StreamWriter(File.OpenWrite(file)))
					{
						writer.Write(fileContent);
		
						writer.Close();
					}
				}
			}

			/*static public string AddImport(string fileContent)
			{
				  CodeCompileUnit targetUnit;
        CodeTypeDeclaration targetClass;
        private const string outputFileName = "SampleCode.cs";
        static void Main(string[] args)
        {
        }
			}*/
			
		]]>
		</code>
	</script>
  </target>
</project>